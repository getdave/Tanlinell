(function(win, doc) {
    var DELAY = 100, TEST_STRING = "AxmTYklsjo190QW", TOLERANCE = 2, SANS_SERIF_FONTS = "sans-serif", SERIF_FONTS = "serif", parent = doc.createElement("div"), html = '<div style="font-family:%s;position:absolute;top:0;left:-9999px;font-size:48px">' + TEST_STRING + "</div>", sansSerif, serif, dimensions, appended = false;
    parent.innerHTML = html.replace(/\%s/, SANS_SERIF_FONTS) + html.replace(/\%s/, SERIF_FONTS);
    sansSerif = parent.firstChild;
    serif = sansSerif.nextSibling;
    FontFaceOnload = function(fontFamily, options) {
        var defaultOptions = {
            glyphs: "",
            success: function() {},
            error: function() {},
            timeout: 1e4
        }, startTime = new Date();
        if (options) {
            for (var j in options) {
                if (options.hasOwnProperty(j)) {
                    defaultOptions[j] = options[j];
                }
            }
        }
        if (options.glyphs) {
            sansSerif.innerHTML += options.glyphs;
            serif.innerHTML += options.glyphs;
        }
        if (!appended && doc.body) {
            appended = true;
            doc.body.appendChild(parent);
            dimensions = {
                sansSerif: {
                    width: sansSerif.offsetWidth,
                    height: sansSerif.offsetHeight
                },
                serif: {
                    width: serif.offsetWidth,
                    height: serif.offsetHeight
                }
            };
        }
        sansSerif.style.fontFamily = fontFamily + ", " + SANS_SERIF_FONTS;
        serif.style.fontFamily = fontFamily + ", " + SERIF_FONTS;
        (function checkDimensions() {
            if (Math.abs(dimensions.sansSerif.width - sansSerif.offsetWidth) > TOLERANCE || Math.abs(dimensions.sansSerif.height - sansSerif.offsetHeight) > TOLERANCE || Math.abs(dimensions.serif.width - serif.offsetWidth) > TOLERANCE || Math.abs(dimensions.serif.height - serif.offsetHeight) > TOLERANCE) {
                options.success();
            } else if (new Date().getTime() - startTime.getTime() > options.timeout) {
                options.error();
            } else {
                setTimeout(function() {
                    checkDimensions();
                }, DELAY);
            }
        })();
    };
})(this, this.document);

(function(w) {
    var doc = w.document, ref, css = [ ".fontface.generatedcontent.%s .icon-fallback-text .icon { display: inline-block; }", ".fontface.generatedcontent.%s .icon-fallback-text .text { clip: rect(0 0 0 0); overflow: hidden; position: absolute; height: 1px; width: 1px; }", ".fontface.%s .icon-fallback-glyph .icon:before { font-size: inherit; line-height: inherit; }" ];
    function addEvent(type, callback) {
        if ("addEventListener" in w) {
            return w.addEventListener(type, callback, false);
        } else if ("attachEvent" in w) {
            return w.attachEvent("on" + type, callback);
        }
    }
    AFontGarde = function(fontFamily, sampleGlyphs) {
        var executed = false;
        function init() {
            if (executed) {
                return;
            }
            executed = true;
            if (typeof FontFaceOnload === "undefined") {
                throw "FontFaceOnload is a prerequisite.";
            }
            if (!ref) {
                ref = doc.getElementsByTagName("script")[0];
            }
            var style = doc.createElement("style");
            style.innerHTML = css.join("\n").replace(/\%s/gi, fontFamily);
            ref.parentNode.insertBefore(style, ref);
            FontFaceOnload(fontFamily, {
                glyphs: sampleGlyphs || "",
                timeout: 5e3,
                success: function() {
                    doc.documentElement.className += " " + fontFamily;
                }
            });
        }
        addEvent("DOMContentLoaded", init);
        addEvent("readystatechange", init);
        addEvent("load", init);
        if (doc.readyState === "complete") {
            init();
        }
    };
})(this);

(function($) {
    var Tanlinell = function() {
        this.$doc = $(document);
        this.$root = $(":root");
        this.init();
    };
    Tanlinell.prototype.utils = {};
    Tanlinell.prototype._helpers = {};
    Tanlinell.prototype.modules = {};
    Tanlinell.prototype.init = function() {
        if (this.utils.isOperaMini()) {
            this.$root.addClass("is-opera-mini");
        }
        if (this.utils.cutsTheMustard()) {
            this.$root.addClass("cuts-the-mustard");
        }
    };
    Tanlinell.prototype.utils = {
        cutsTheMustard: function() {
            if ("querySelector" in document && "localStorage" in window && "addEventListener" in window) {
                return true;
            } else {
                return false;
            }
        },
        isOperaMini: function() {
            return Object.prototype.toString.call(window.operamini) === "[object OperaMini]";
        }
    };
    window.Tanlinell = new Tanlinell();
})(jQuery);

(function(Tanlinell, $) {
    function Toggle(el, options) {
        this.el = el;
        this.$el = $(el);
        this.settings = $.extend({
            eventType: "click",
            toggleTarget: this.$el.data("toggle-target"),
            classList: this.$el.data("toggle-classlist") || "is-active"
        }, options);
        this.$toggleTarget = $(this.settings.toggleTarget);
        this.setup();
    }
    Toggle.prototype.setup = function() {
        this.addListeners();
    };
    Toggle.prototype.addListeners = function() {
        var _this = this;
        $(document).on(this.settings.eventType, this.el, function(e) {
            e.preventDefault();
            _this.toggleIt($(this), e);
        });
    };
    Toggle.prototype.toggleIt = function($ele, event) {
        this.$toggleTarget.toggleClass(this.settings.classList);
        $(event.currentTarget).toggleClass("toggle--active");
    };
    new Toggle("[data-toggle]");
    Tanlinell.modules.Toggle = Toggle;
})(Tanlinell, jQuery);

var SITE = SITE || {};

SITE.CONSTANTS = {};

(function($) {
    (function() {
        $(document).ready(function() {});
    })();
    (function() {
        $(document).ready(function() {
            new AFontGarde("icomoon", "");
        });
    })();
    (function() {
        Modernizr.load({
            test: Modernizr.mq("only screen and (min-width: 62em)"),
            yep: [ tanlinellSiteDetails.templateDirectoryUri + "/assets/js/conditional/jquery.hoverIntent.js", tanlinellSiteDetails.templateDirectoryUri + "/assets/js/conditional/superfish/superfish.js" ],
            complete: function() {
                if (jQuery().superfish) {
                    jQuery("#nav-primary").superfish({
                        speed: 250,
                        speedOut: 100,
                        delay: 250,
                        animation: {
                            opacity: "show",
                            height: "show"
                        }
                    });
                }
            }
        });
    })();
})(jQuery);

(function($) {})(jQuery);