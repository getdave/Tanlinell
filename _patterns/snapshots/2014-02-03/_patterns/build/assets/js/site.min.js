(function(win, doc) {
    var DELAY = 100, TEST_STRING = "AxmTYklsjo190QW", TOLERANCE = 2, SANS_SERIF_FONTS = "sans-serif", SERIF_FONTS = "serif", parent = doc.createElement("div"), html = '<div style="font-family:%s;position:absolute;top:0;left:-9999px;font-size:48px">' + TEST_STRING + "</div>", sansSerif, serif, dimensions, appended = false;
    parent.innerHTML = html.replace(/\%s/, SANS_SERIF_FONTS) + html.replace(/\%s/, SERIF_FONTS);
    sansSerif = parent.firstChild;
    serif = sansSerif.nextSibling;
    FontFaceOnload = function(fontFamily, options) {
        var defaultOptions = {
            glyphs: "",
            success: function() {},
            error: function() {},
            timeout: 1e4
        }, startTime = new Date();
        if (options) {
            for (var j in options) {
                if (options.hasOwnProperty(j)) {
                    defaultOptions[j] = options[j];
                }
            }
        }
        if (options.glyphs) {
            sansSerif.innerHTML += options.glyphs;
            serif.innerHTML += options.glyphs;
        }
        if (!appended && doc.body) {
            appended = true;
            doc.body.appendChild(parent);
            dimensions = {
                sansSerif: {
                    width: sansSerif.offsetWidth,
                    height: sansSerif.offsetHeight
                },
                serif: {
                    width: serif.offsetWidth,
                    height: serif.offsetHeight
                }
            };
        }
        sansSerif.style.fontFamily = fontFamily + ", " + SANS_SERIF_FONTS;
        serif.style.fontFamily = fontFamily + ", " + SERIF_FONTS;
        (function checkDimensions() {
            if (Math.abs(dimensions.sansSerif.width - sansSerif.offsetWidth) > TOLERANCE || Math.abs(dimensions.sansSerif.height - sansSerif.offsetHeight) > TOLERANCE || Math.abs(dimensions.serif.width - serif.offsetWidth) > TOLERANCE || Math.abs(dimensions.serif.height - serif.offsetHeight) > TOLERANCE) {
                options.success();
            } else if (new Date().getTime() - startTime.getTime() > options.timeout) {
                options.error();
            } else {
                setTimeout(function() {
                    checkDimensions();
                }, DELAY);
            }
        })();
    };
})(this, this.document);

(function(w) {
    var doc = w.document, ref, css = [ ".fontface.generatedcontent.%s .icon-fallback-text .icon { display: inline-block; }", ".fontface.generatedcontent.%s .icon-fallback-text .text { clip: rect(0 0 0 0); overflow: hidden; position: absolute; height: 1px; width: 1px; }", ".fontface.%s .icon-fallback-glyph .icon:before { font-size: inherit; line-height: inherit; }" ];
    function addEvent(type, callback) {
        if ("addEventListener" in w) {
            return w.addEventListener(type, callback, false);
        } else if ("attachEvent" in w) {
            return w.attachEvent("on" + type, callback);
        }
    }
    AFontGarde = function(fontFamily, sampleGlyphs) {
        var executed = false;
        function init() {
            if (executed) {
                return;
            }
            executed = true;
            if (typeof FontFaceOnload === "undefined") {
                throw "FontFaceOnload is a prerequisite.";
            }
            if (!ref) {
                ref = doc.getElementsByTagName("script")[0];
            }
            var style = doc.createElement("style");
            style.innerHTML = css.join("\n").replace(/\%s/gi, fontFamily);
            ref.parentNode.insertBefore(style, ref);
            FontFaceOnload(fontFamily, {
                glyphs: sampleGlyphs || "",
                timeout: 5e3,
                success: function() {
                    doc.documentElement.className += " " + fontFamily;
                }
            });
        }
        addEvent("DOMContentLoaded", init);
        addEvent("readystatechange", init);
        addEvent("load", init);
        if (doc.readyState === "complete") {
            init();
        }
    };
})(this);

function FastClick(layer) {
    "use strict";
    var oldOnClick, self = this;
    this.trackingClick = false;
    this.trackingClickStart = 0;
    this.targetElement = null;
    this.touchStartX = 0;
    this.touchStartY = 0;
    this.lastTouchIdentifier = 0;
    this.touchBoundary = 10;
    this.layer = layer;
    if (!layer || !layer.nodeType) {
        throw new TypeError("Layer must be a document node");
    }
    this.onClick = function() {
        return FastClick.prototype.onClick.apply(self, arguments);
    };
    this.onMouse = function() {
        return FastClick.prototype.onMouse.apply(self, arguments);
    };
    this.onTouchStart = function() {
        return FastClick.prototype.onTouchStart.apply(self, arguments);
    };
    this.onTouchMove = function() {
        return FastClick.prototype.onTouchMove.apply(self, arguments);
    };
    this.onTouchEnd = function() {
        return FastClick.prototype.onTouchEnd.apply(self, arguments);
    };
    this.onTouchCancel = function() {
        return FastClick.prototype.onTouchCancel.apply(self, arguments);
    };
    if (FastClick.notNeeded(layer)) {
        return;
    }
    if (this.deviceIsAndroid) {
        layer.addEventListener("mouseover", this.onMouse, true);
        layer.addEventListener("mousedown", this.onMouse, true);
        layer.addEventListener("mouseup", this.onMouse, true);
    }
    layer.addEventListener("click", this.onClick, true);
    layer.addEventListener("touchstart", this.onTouchStart, false);
    layer.addEventListener("touchmove", this.onTouchMove, false);
    layer.addEventListener("touchend", this.onTouchEnd, false);
    layer.addEventListener("touchcancel", this.onTouchCancel, false);
    if (!Event.prototype.stopImmediatePropagation) {
        layer.removeEventListener = function(type, callback, capture) {
            var rmv = Node.prototype.removeEventListener;
            if (type === "click") {
                rmv.call(layer, type, callback.hijacked || callback, capture);
            } else {
                rmv.call(layer, type, callback, capture);
            }
        };
        layer.addEventListener = function(type, callback, capture) {
            var adv = Node.prototype.addEventListener;
            if (type === "click") {
                adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
                    if (!event.propagationStopped) {
                        callback(event);
                    }
                }), capture);
            } else {
                adv.call(layer, type, callback, capture);
            }
        };
    }
    if (typeof layer.onclick === "function") {
        oldOnClick = layer.onclick;
        layer.addEventListener("click", function(event) {
            oldOnClick(event);
        }, false);
        layer.onclick = null;
    }
}

FastClick.prototype.deviceIsAndroid = navigator.userAgent.indexOf("Android") > 0;

FastClick.prototype.deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent);

FastClick.prototype.deviceIsIOS4 = FastClick.prototype.deviceIsIOS && /OS 4_\d(_\d)?/.test(navigator.userAgent);

FastClick.prototype.deviceIsIOSWithBadTarget = FastClick.prototype.deviceIsIOS && /OS ([6-9]|\d{2})_\d/.test(navigator.userAgent);

FastClick.prototype.needsClick = function(target) {
    "use strict";
    switch (target.nodeName.toLowerCase()) {
      case "button":
      case "select":
      case "textarea":
        if (target.disabled) {
            return true;
        }
        break;

      case "input":
        if (this.deviceIsIOS && target.type === "file" || target.disabled) {
            return true;
        }
        break;

      case "label":
      case "video":
        return true;
    }
    return /\bneedsclick\b/.test(target.className);
};

FastClick.prototype.needsFocus = function(target) {
    "use strict";
    switch (target.nodeName.toLowerCase()) {
      case "textarea":
        return true;

      case "select":
        return !this.deviceIsAndroid;

      case "input":
        switch (target.type) {
          case "button":
          case "checkbox":
          case "file":
          case "image":
          case "radio":
          case "submit":
            return false;
        }
        return !target.disabled && !target.readOnly;

      default:
        return /\bneedsfocus\b/.test(target.className);
    }
};

FastClick.prototype.sendClick = function(targetElement, event) {
    "use strict";
    var clickEvent, touch;
    if (document.activeElement && document.activeElement !== targetElement) {
        document.activeElement.blur();
    }
    touch = event.changedTouches[0];
    clickEvent = document.createEvent("MouseEvents");
    clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
    clickEvent.forwardedTouchEvent = true;
    targetElement.dispatchEvent(clickEvent);
};

FastClick.prototype.determineEventType = function(targetElement) {
    "use strict";
    if (this.deviceIsAndroid && targetElement.tagName.toLowerCase() === "select") {
        return "mousedown";
    }
    return "click";
};

FastClick.prototype.focus = function(targetElement) {
    "use strict";
    var length;
    if (this.deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf("date") !== 0 && targetElement.type !== "time") {
        length = targetElement.value.length;
        targetElement.setSelectionRange(length, length);
    } else {
        targetElement.focus();
    }
};

FastClick.prototype.updateScrollParent = function(targetElement) {
    "use strict";
    var scrollParent, parentElement;
    scrollParent = targetElement.fastClickScrollParent;
    if (!scrollParent || !scrollParent.contains(targetElement)) {
        parentElement = targetElement;
        do {
            if (parentElement.scrollHeight > parentElement.offsetHeight) {
                scrollParent = parentElement;
                targetElement.fastClickScrollParent = parentElement;
                break;
            }
            parentElement = parentElement.parentElement;
        } while (parentElement);
    }
    if (scrollParent) {
        scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
    }
};

FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {
    "use strict";
    if (eventTarget.nodeType === Node.TEXT_NODE) {
        return eventTarget.parentNode;
    }
    return eventTarget;
};

FastClick.prototype.onTouchStart = function(event) {
    "use strict";
    var targetElement, touch, selection;
    if (event.targetTouches.length > 1) {
        return true;
    }
    targetElement = this.getTargetElementFromEventTarget(event.target);
    touch = event.targetTouches[0];
    if (this.deviceIsIOS) {
        selection = window.getSelection();
        if (selection.rangeCount && !selection.isCollapsed) {
            return true;
        }
        if (!this.deviceIsIOS4) {
            if (touch.identifier === this.lastTouchIdentifier) {
                event.preventDefault();
                return false;
            }
            this.lastTouchIdentifier = touch.identifier;
            this.updateScrollParent(targetElement);
        }
    }
    this.trackingClick = true;
    this.trackingClickStart = event.timeStamp;
    this.targetElement = targetElement;
    this.touchStartX = touch.pageX;
    this.touchStartY = touch.pageY;
    if (event.timeStamp - this.lastClickTime < 200) {
        event.preventDefault();
    }
    return true;
};

FastClick.prototype.touchHasMoved = function(event) {
    "use strict";
    var touch = event.changedTouches[0], boundary = this.touchBoundary;
    if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
        return true;
    }
    return false;
};

FastClick.prototype.onTouchMove = function(event) {
    "use strict";
    if (!this.trackingClick) {
        return true;
    }
    if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
        this.trackingClick = false;
        this.targetElement = null;
    }
    return true;
};

FastClick.prototype.findControl = function(labelElement) {
    "use strict";
    if (labelElement.control !== undefined) {
        return labelElement.control;
    }
    if (labelElement.htmlFor) {
        return document.getElementById(labelElement.htmlFor);
    }
    return labelElement.querySelector("button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea");
};

FastClick.prototype.onTouchEnd = function(event) {
    "use strict";
    var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;
    if (!this.trackingClick) {
        return true;
    }
    if (event.timeStamp - this.lastClickTime < 200) {
        this.cancelNextClick = true;
        return true;
    }
    this.cancelNextClick = false;
    this.lastClickTime = event.timeStamp;
    trackingClickStart = this.trackingClickStart;
    this.trackingClick = false;
    this.trackingClickStart = 0;
    if (this.deviceIsIOSWithBadTarget) {
        touch = event.changedTouches[0];
        targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
        targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
    }
    targetTagName = targetElement.tagName.toLowerCase();
    if (targetTagName === "label") {
        forElement = this.findControl(targetElement);
        if (forElement) {
            this.focus(targetElement);
            if (this.deviceIsAndroid) {
                return false;
            }
            targetElement = forElement;
        }
    } else if (this.needsFocus(targetElement)) {
        if (event.timeStamp - trackingClickStart > 100 || this.deviceIsIOS && window.top !== window && targetTagName === "input") {
            this.targetElement = null;
            return false;
        }
        this.focus(targetElement);
        if (!this.deviceIsIOS4 || targetTagName !== "select") {
            this.targetElement = null;
            event.preventDefault();
        }
        return false;
    }
    if (this.deviceIsIOS && !this.deviceIsIOS4) {
        scrollParent = targetElement.fastClickScrollParent;
        if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
            return true;
        }
    }
    if (!this.needsClick(targetElement)) {
        event.preventDefault();
        this.sendClick(targetElement, event);
    }
    return false;
};

FastClick.prototype.onTouchCancel = function() {
    "use strict";
    this.trackingClick = false;
    this.targetElement = null;
};

FastClick.prototype.onMouse = function(event) {
    "use strict";
    if (!this.targetElement) {
        return true;
    }
    if (event.forwardedTouchEvent) {
        return true;
    }
    if (!event.cancelable) {
        return true;
    }
    if (!this.needsClick(this.targetElement) || this.cancelNextClick) {
        if (event.stopImmediatePropagation) {
            event.stopImmediatePropagation();
        } else {
            event.propagationStopped = true;
        }
        event.stopPropagation();
        event.preventDefault();
        return false;
    }
    return true;
};

FastClick.prototype.onClick = function(event) {
    "use strict";
    var permitted;
    if (this.trackingClick) {
        this.targetElement = null;
        this.trackingClick = false;
        return true;
    }
    if (event.target.type === "submit" && event.detail === 0) {
        return true;
    }
    permitted = this.onMouse(event);
    if (!permitted) {
        this.targetElement = null;
    }
    return permitted;
};

FastClick.prototype.destroy = function() {
    "use strict";
    var layer = this.layer;
    if (this.deviceIsAndroid) {
        layer.removeEventListener("mouseover", this.onMouse, true);
        layer.removeEventListener("mousedown", this.onMouse, true);
        layer.removeEventListener("mouseup", this.onMouse, true);
    }
    layer.removeEventListener("click", this.onClick, true);
    layer.removeEventListener("touchstart", this.onTouchStart, false);
    layer.removeEventListener("touchmove", this.onTouchMove, false);
    layer.removeEventListener("touchend", this.onTouchEnd, false);
    layer.removeEventListener("touchcancel", this.onTouchCancel, false);
};

FastClick.notNeeded = function(layer) {
    "use strict";
    var metaViewport;
    var chromeVersion;
    if (typeof window.ontouchstart === "undefined") {
        return true;
    }
    chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [ , 0 ])[1];
    if (chromeVersion) {
        if (FastClick.prototype.deviceIsAndroid) {
            metaViewport = document.querySelector("meta[name=viewport]");
            if (metaViewport) {
                if (metaViewport.content.indexOf("user-scalable=no") !== -1) {
                    return true;
                }
                if (chromeVersion > 31 && window.innerWidth <= window.screen.width) {
                    return true;
                }
            }
        } else {
            return true;
        }
    }
    if (layer.style.msTouchAction === "none") {
        return true;
    }
    return false;
};

FastClick.attach = function(layer) {
    "use strict";
    return new FastClick(layer);
};

if (typeof define !== "undefined" && define.amd) {
    define(function() {
        "use strict";
        return FastClick;
    });
} else if (typeof module !== "undefined" && module.exports) {
    module.exports = FastClick.attach;
    module.exports.FastClick = FastClick;
} else {
    window.FastClick = FastClick;
}

(function(w) {
    "use strict";
    w.picturefill = function() {
        var ps = w.document.getElementsByTagName("span");
        for (var i = 0, il = ps.length; i < il; i++) {
            if (ps[i].getAttribute("data-picture") !== null) {
                var sources = ps[i].getElementsByTagName("span"), matches = [];
                for (var j = 0, jl = sources.length; j < jl; j++) {
                    var media = sources[j].getAttribute("data-media");
                    if (!media || w.matchMedia && w.matchMedia(media).matches) {
                        matches.push(sources[j]);
                    }
                }
                var picImg = ps[i].getElementsByTagName("img")[0];
                if (matches.length) {
                    var matchedEl = matches.pop();
                    if (!picImg || picImg.parentNode.nodeName === "NOSCRIPT") {
                        picImg = w.document.createElement("img");
                        picImg.alt = ps[i].getAttribute("data-alt");
                    } else if (matchedEl === picImg.parentNode) {
                        continue;
                    }
                    picImg.src = matchedEl.getAttribute("data-src");
                    matchedEl.appendChild(picImg);
                    picImg.removeAttribute("width");
                    picImg.removeAttribute("height");
                } else if (picImg) {
                    picImg.parentNode.removeChild(picImg);
                }
            }
        }
    };
    if (w.addEventListener) {
        w.addEventListener("resize", w.picturefill, false);
        w.addEventListener("DOMContentLoaded", function() {
            w.picturefill();
            w.removeEventListener("load", w.picturefill, false);
        }, false);
        w.addEventListener("load", w.picturefill, false);
    } else if (w.attachEvent) {
        w.attachEvent("onload", w.picturefill);
    }
})(this);

var SITE = SITE || {};

var tanlinellSiteDetails = tanlinellSiteDetails || {};

SITE.CONSTANTS = {};

SITE.widgets = {};

SITE.utils = {};

SITE.utils.cutsTheMustard = function() {
    if ("querySelector" in document && "localStorage" in window && "addEventListener" in window) {
        return true;
    } else {
        return false;
    }
}();

SITE.utils.isOperaMini = Object.prototype.toString.call(window.operamini) === "[object OperaMini]";

SITE.utils.addRootClasses = function() {
    if (SITE.utils.isOperaMini) {
        $("html").addClass("is-opera-mini");
    }
    if (SITE.utils.cutsTheMustard) {
        $("html").addClass("cuts-the-mustard");
    }
}();

SITE.utils.activeMQ = function() {
    var lookup = {
        none: 1,
        tiny: 2,
        small: 3,
        medium: 4,
        large: 5,
        "x-large": 6
    };
    var mqString = window.getComputedStyle(document.body, ":after").getPropertyValue("content");
    return lookup[mqString];
}();

(function($) {
    var OffCanvas = function(options) {
        this.settings = $.extend({
            offscreenRight: false,
            offscreenLeft: false,
            canvas: "#page",
            toggleLeft: ".offcanvas__toggle--left",
            toggleRight: ".offcanvas__toggle--right"
        }, options);
        this.offscreenRight = this.settings.offscreenRight;
        this.$offscreenRight = $(this.offscreenRight);
        this.offscreenLeft = this.settings.offscreenLeft;
        this.$offscreenLeft = $(this.offscreenLeft);
        this.canvas = this.settings.canvas;
        this.$canvas = $(this.canvas);
        this.init();
    };
    OffCanvas.prototype = function() {
        var root = $(":root");
        var body = $("body");
        var win_width = $(window).width();
        var init = function() {
            var self = this;
            addClassNames.call(this);
            addEventListeners.call(this);
        }, toggleNav = function(event, direction) {
            closeNav.call(this);
            if (body.hasClass("offcanvas--active")) {
                body.removeClass("offcanvas--active-" + direction);
                body.removeClass("offcanvas--active");
            } else {
                body.addClass("offcanvas--active-" + direction);
                body.addClass("offcanvas--active");
            }
        }, closeNav = function() {
            body.removeClass("offcanvas--active-right").removeClass("offcanvas--active-left");
        }, addClassNames = function() {
            root.addClass("has-offcanvas-nav");
            this.$canvas.addClass("offcanvas-nav__canvas");
        }, addEventListeners = function() {
            $(this.settings.toggleRight).on("click", function(e) {
                e.preventDefault();
                e.stopPropagation();
                toggleNav.call(this, e, "right");
            });
            $(this.settings.toggleLeft).on("click", function(e) {
                e.preventDefault();
                e.stopPropagation();
                toggleNav.call(this, e, "left");
            });
            $(window).on("resize", function() {
                if ($(window).width() !== win_width) {
                    closeNav.call(this);
                }
            });
        };
        return {
            init: init
        };
    }();
    SITE.widgets.OffCanvas = OffCanvas;
})(jQuery);

(function($) {
    var TanlinellAccordion = function(options) {
        this.settings = $.extend({}, options);
        this.$el = $(this.settings.el);
        this.$headings = this.$el.children(".js-accordion__heading");
        this.$panels = this.$el.children(".js-accordion__content");
        this.init();
    };
    TanlinellAccordion.prototype.init = function() {
        var _this = this;
        this._prepHeadings();
        this._prepPanels();
        this._createFocusableTargets();
        $.each(this.$panels, function(index, value) {
            var el = $(this);
            if (el.hasClass("is-active")) {
                _this.open($(this));
            } else {
                _this.close($(this));
            }
        });
        this.$el.on("click", ".js-accordion__heading > a", function(evt) {
            var nextPaneltoHeading = $(this).parent().next(".js-accordion__content");
            _this.toggle(nextPaneltoHeading);
            evt.preventDefault();
        });
    };
    TanlinellAccordion.prototype._prepHeadings = function() {
        $.each(this.$headings, function(index, value) {
            var id = "accordion-heading-" + index;
            $(this).attr({
                id: id,
                role: "tab",
                "aria-controls": "accordion-content-" + index
            });
        });
    };
    TanlinellAccordion.prototype._prepPanels = function() {
        $.each(this.$panels, function(index, value) {
            var id = "accordion-content-" + index;
            $(this).attr({
                id: id,
                role: "tabpanel",
                "aria-labelledby": "accordion-heading-" + index
            });
        });
    };
    TanlinellAccordion.prototype._createFocusableTargets = function() {
        this.$headings.each(function() {
            var hashTarget = $(this).attr("aria-controls");
            $(this).wrapInner('<a href="#' + hashTarget + '"></a>');
        });
    };
    TanlinellAccordion.prototype.toggle = function(ele) {
        if (ele.hasClass("is-active")) {
            this.close(ele);
        } else {
            this.open(ele);
        }
    };
    TanlinellAccordion.prototype.open = function(ele) {
        ele.show();
        ele.addClass("is-active");
        ele.attr("aria-hidden", "false");
        ele.prev(".js-accordion__heading").attr("aria-expanded", "true");
    };
    TanlinellAccordion.prototype.close = function(ele) {
        ele.hide();
        ele.removeClass("is-active");
        ele.attr("aria-hidden", "true");
        ele.prev(".js-accordion__heading").attr("aria-expanded", "false");
    };
    SITE.widgets.TanlinellAccordion = TanlinellAccordion;
})(jQuery);

(function($) {
    $(document).ready(function() {
        new AFontGarde("icomoon", "");
    });
    $(function() {
        FastClick.attach(document.body);
    });
})(jQuery);

(function($) {
    $(document).ready(function() {
        if (SITE.utils.activeMQ < 4) {
            var featureBlockAccordian = new SITE.widgets.TanlinellAccordion({
                el: ".js-accordion"
            });
        }
    });
})(jQuery);

(function($) {
    $(document).ready(function() {
        if (SITE.utils.cutsTheMustard) {
            var offCanvasNavigation = new SITE.widgets.OffCanvas({
                offscreenRight: ".js-offcanvas-navigation",
                canvas: "#page",
                toggleRight: ".js-menu-primary-toggle"
            });
        }
    });
})(jQuery);