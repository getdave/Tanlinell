// ==========================================================================
// MIXINS
//
// Description: global mixins and functions
//
// ==========================================================================



// ==========================================================================
// TYPOGRAPHY
// ==========================================================================

// HEADINGS
// Easily create and apply styles to multiple heading levels
// ==========================================================================
@mixin headings($from: 1, $to: 6){
    @for $i from $from through $to{
      h#{$i}, .h#{$i}, %h#{$i} {
        @content
      }
    }
}

// FONTFACE REGISTRATION
// creates an @font-face rule based on provided arguments
// ==========================================================================
@mixin register-font( $font-name, $font-path :"../fonts" ) {
    @font-face{
        font-family: $font-name;
        src:url('#{$font-path}/#{$font-name}.eot');
        src:url('#{$font-path}/#{$font-name}.eot?#iefix') format('embedded-opentype'),
            url('#{$font-path}/#{$font-name}.woff') format('woff'),
            url('#{$font-path}/#{$font-name}.ttf') format('truetype'),
            url('#{$font-path}/#{$font-name}.svg##{$font-name}') format('svg');
        font-weight:normal;
        font-style:normal;
    }
}



// ==========================================================================
// LAYOUT
// ==========================================================================

// CLEARFIX
// ==========================================================================
@mixin clearfix {
    zoom: 1;

    &:before {
        content: "";
        display: table;
    }

    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

// LIST RESET
// resets a list removing all styling and box model attributes
// ==========================================================================
@mixin list-reset {
    list-style: none;
    margin: 0;
    padding: 0;
}



// ==========================================================================
// COLOUR
// ==========================================================================

@function black($opacity){
    @return rgba(0,0,0,$opacity)
}

@function white($opacity){
    @return rgba(255,255,255,$opacity)
}



// ==========================================================================
// RESPONSIVE
// ==========================================================================

// Deprecated - prefer "min-screen()"
@mixin respond-to($res) {
  @if ($is-oldie == true or $isFixed == true) {
      // Check if we're IE. If so then just return the content sans-media query
      @if $fix-mqs >= $res {
          @content;
      }
  } @else {
    @media screen and (min-width: $res)
    {
      @content;
    }
  }
}



// ==========================================================================
// TEXTURE
// ==========================================================================

// ARROWS
// outputs a pure CSS arrows (@include arrow(top, #000, 50px);)
// ==========================================================================
@mixin arrow($direction, $color, $size){
    display: block;
    height: 0;
    width: 0;

    @if $direction == 'top' {
        border-left: $size solid transparent;
    	border-right: $size solid transparent;
    	border-bottom: $size solid $color;
    } @else if $direction == 'right' {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
    	border-left: $size solid $color;
    } @else if $direction == 'bottom' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
        border-left: $size solid transparent;
    } @else if $direction == 'left' {
        border-top: $size solid transparent;
    	border-right: $size solid $color;
    	border-bottom: $size solid transparent;
    } @else if $direction == 'top-left' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
    } @else if $direction == 'top-right' {
        border-top: $size solid $color;
        border-left: $size solid transparent;
    } @else if $direction == 'bottom-left' {
        border-bottom: $size solid $color;
        border-right: $size solid transparent;
    } @else if $direction == 'bottom-right' {
        border-bottom: $size solid $color;
        border-left: $size solid transparent;
    }
}



// ==========================================================================
// UTILITIES
// ==========================================================================

// PARSEINT
// parses an integer from an input
// ==========================================================================
@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

// GCF
// Find the greatest common factor of two integers
// ==========================================================================
@function gcf($a, $b) {
    @if $b == 0 { @return $a; }
    @else { @return gcf($b, $a % $b) }
}

// CONTAINS
// Check if a list contains a given value
// ==========================================================================
@function contains($list, $value) {
    @if type-of($list) == list { @return not not index($list, $value); }
    @else { @return $list == $value; }
}



// ==========================================================================
// UNITS
// ==========================================================================

// REMS
// outputs property with standard rem unit + fallback for older browsers
// ==========================================================================
@mixin rem($property, $values) {
  $px : ();
  $rem: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == "px" {
        $px : append($px,  $value);
        $rem: append($rem, ($val / 16 + rem));
      }

      @if $unit == "rem" {
        $px : append($px,  ($val * 16 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}

// RSIZE
// outputs em unit (only!) when provided with pixel input
// ==========================================================================
@function rsize($pxval, $baseline : $baseFontSize) {
    @return ($pxval/$baseline) + em;
}

// Alias of "rsize()"
@function em($pxval, $baseline : $baseFontSize) {
    @return rsize($pxval, $baseline : $baseFontSize);
}



// ==========================================================================
// ANIMATION
// ==========================================================================

@mixin animate($name: fadeIn, $duration: 1s, $delay: 0.2s, $function: ease, $mode: both) {
    @include experimental(animation, $name $duration $delay $function $mode);
}

@mixin keyframe ($animation-name){
    @-webkit-keyframes $animation-name{
        @content;
    }

    @-moz-keyframes $animation-name{
        @content;
    }

    @-ms-keyframes $animation-name{
        @content;
    }

    @-o-keyframes $animation-name{
        @content;
    }

    @keyframes $animation-name{
        @content;
    }
}



// ==========================================================================
// CSS
// ==========================================================================

// SELECTION
// Mixin for selection markup
// ==========================================================================
@mixin selection($background, $color, $element:false) {
    @if($element) {
        &::-moz-selection{ background:$background; color:$color; text-shadow:none; }
        &::selection { background:$background; color:$color; text-shadow:none; }
    } @else {
        ::-moz-selection{ background:$background; color:$color; text-shadow:none; }
        ::selection { background:$background; color:$color; text-shadow:none; }
    }
}

// PLACEHOLDER
// Mixin for placeholder styling
// ==========================================================================
@mixin placeHolder($color) {
    &::-webkit-input-placeholder { color:$color; }
    &:-moz-placeholder { color:$color; }
}

// TAB FOCUS
// Webkit-style focus
// ==========================================================================
@mixin tab-focus {
    outline: thin dotted #333;
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
}

// VENDOR
// ==========================================================================
@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}


// POINTER EVENTS
// The CSS property pointer-events allows authors to control under what
// circumstances (if any) a particular graphic element can become the target of
// mouse events.
// @see https://developer.mozilla.org/en/CSS/pointer-events
// ==========================================================================
@mixin pointer-events($type: none) {
    $type: unquote($type);
    @include experimental(pointer-events, $type,
        -moz, -webkit, not -o, not -ms, -khtml, official
    );
}



// =============================================================================
// GRID MIXINS & FUNCTIONS
// borrowed and adapted from original source at
// https://raw.github.com/necolas/griddle/master/_griddle-build.scss
// =============================================================================

$gutter_width: $gutter;
$large_gutter_width: ($gutter*2);
$half_gutter_width: ($gutter/2);


// Fluid grid units
// modified from original to remove "modifier" and replace
// with "prefix" which is better suited to our grid system
@mixin griddle-build($units, $prefix: 'gc') {

    /* Proportional units
       ========================================================================== */

    /*
     * Specify the proportional width of an object.
     * Primarily for, but not limited to, use with `.grid__cell` components.
     * Intentional redundancy build into each set of unit classes.
     */

    @each $n in $units {
        // Avoid creating rules like `.unit-12-12 {}`
        $x: $n - 1;

        @for $i from 1 through $x {
            // Initialize variables
            $i-r: 0;
            $n-r: 0;

            // Find the greatest common factor
            $g: gcf($i, $n);

            @if $g > 1 {
                // Reduced value of $i
                $i-r: $i/$g;
                // Reduced value of $n
                $n-r: $n/$g;
            }

            // Check if the reduced value of $n was also supplied in the list
            // of units to be built
            $canreduce: contains($units, $n-r);

            // Create units based on fractions
            .#{$prefix}#{$i}-#{$n} {
                // If this unit can be reduced then extend the previous rule
                @if $canreduce {
                    @extend .#{$prefix}#{$i-r}-#{$n-r};
                }
                // Otherwise create a new % width
                @else {
                    width: percentage($i / $n);
                }
            }
        }
    }
}
