function FastClick(layer, options) {
    "use strict";
    var oldOnClick;
    options = options || {};
    this.trackingClick = false;
    this.trackingClickStart = 0;
    this.targetElement = null;
    this.touchStartX = 0;
    this.touchStartY = 0;
    this.lastTouchIdentifier = 0;
    this.touchBoundary = options.touchBoundary || 10;
    this.layer = layer;
    this.tapDelay = options.tapDelay || 200;
    if (FastClick.notNeeded(layer)) {
        return;
    }
    function bind(method, context) {
        return function() {
            return method.apply(context, arguments);
        };
    }
    var methods = [ "onMouse", "onClick", "onTouchStart", "onTouchMove", "onTouchEnd", "onTouchCancel" ];
    var context = this;
    for (var i = 0, l = methods.length; i < l; i++) {
        context[methods[i]] = bind(context[methods[i]], context);
    }
    if (deviceIsAndroid) {
        layer.addEventListener("mouseover", this.onMouse, true);
        layer.addEventListener("mousedown", this.onMouse, true);
        layer.addEventListener("mouseup", this.onMouse, true);
    }
    layer.addEventListener("click", this.onClick, true);
    layer.addEventListener("touchstart", this.onTouchStart, false);
    layer.addEventListener("touchmove", this.onTouchMove, false);
    layer.addEventListener("touchend", this.onTouchEnd, false);
    layer.addEventListener("touchcancel", this.onTouchCancel, false);
    if (!Event.prototype.stopImmediatePropagation) {
        layer.removeEventListener = function(type, callback, capture) {
            var rmv = Node.prototype.removeEventListener;
            if (type === "click") {
                rmv.call(layer, type, callback.hijacked || callback, capture);
            } else {
                rmv.call(layer, type, callback, capture);
            }
        };
        layer.addEventListener = function(type, callback, capture) {
            var adv = Node.prototype.addEventListener;
            if (type === "click") {
                adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
                    if (!event.propagationStopped) {
                        callback(event);
                    }
                }), capture);
            } else {
                adv.call(layer, type, callback, capture);
            }
        };
    }
    if (typeof layer.onclick === "function") {
        oldOnClick = layer.onclick;
        layer.addEventListener("click", function(event) {
            oldOnClick(event);
        }, false);
        layer.onclick = null;
    }
}

var deviceIsAndroid = navigator.userAgent.indexOf("Android") > 0;

var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent);

var deviceIsIOS4 = deviceIsIOS && /OS 4_\d(_\d)?/.test(navigator.userAgent);

var deviceIsIOSWithBadTarget = deviceIsIOS && /OS ([6-9]|\d{2})_\d/.test(navigator.userAgent);

FastClick.prototype.needsClick = function(target) {
    "use strict";
    switch (target.nodeName.toLowerCase()) {
      case "button":
      case "select":
      case "textarea":
        if (target.disabled) {
            return true;
        }
        break;

      case "input":
        if (deviceIsIOS && target.type === "file" || target.disabled) {
            return true;
        }
        break;

      case "label":
      case "video":
        return true;
    }
    return /\bneedsclick\b/.test(target.className);
};

FastClick.prototype.needsFocus = function(target) {
    "use strict";
    switch (target.nodeName.toLowerCase()) {
      case "textarea":
        return true;

      case "select":
        return !deviceIsAndroid;

      case "input":
        switch (target.type) {
          case "button":
          case "checkbox":
          case "file":
          case "image":
          case "radio":
          case "submit":
            return false;
        }
        return !target.disabled && !target.readOnly;

      default:
        return /\bneedsfocus\b/.test(target.className);
    }
};

FastClick.prototype.sendClick = function(targetElement, event) {
    "use strict";
    var clickEvent, touch;
    if (document.activeElement && document.activeElement !== targetElement) {
        document.activeElement.blur();
    }
    touch = event.changedTouches[0];
    clickEvent = document.createEvent("MouseEvents");
    clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
    clickEvent.forwardedTouchEvent = true;
    targetElement.dispatchEvent(clickEvent);
};

FastClick.prototype.determineEventType = function(targetElement) {
    "use strict";
    if (deviceIsAndroid && targetElement.tagName.toLowerCase() === "select") {
        return "mousedown";
    }
    return "click";
};

FastClick.prototype.focus = function(targetElement) {
    "use strict";
    var length;
    if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf("date") !== 0 && targetElement.type !== "time") {
        length = targetElement.value.length;
        targetElement.setSelectionRange(length, length);
    } else {
        targetElement.focus();
    }
};

FastClick.prototype.updateScrollParent = function(targetElement) {
    "use strict";
    var scrollParent, parentElement;
    scrollParent = targetElement.fastClickScrollParent;
    if (!scrollParent || !scrollParent.contains(targetElement)) {
        parentElement = targetElement;
        do {
            if (parentElement.scrollHeight > parentElement.offsetHeight) {
                scrollParent = parentElement;
                targetElement.fastClickScrollParent = parentElement;
                break;
            }
            parentElement = parentElement.parentElement;
        } while (parentElement);
    }
    if (scrollParent) {
        scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
    }
};

FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {
    "use strict";
    if (eventTarget.nodeType === Node.TEXT_NODE) {
        return eventTarget.parentNode;
    }
    return eventTarget;
};

FastClick.prototype.onTouchStart = function(event) {
    "use strict";
    var targetElement, touch, selection;
    if (event.targetTouches.length > 1) {
        return true;
    }
    targetElement = this.getTargetElementFromEventTarget(event.target);
    touch = event.targetTouches[0];
    if (deviceIsIOS) {
        selection = window.getSelection();
        if (selection.rangeCount && !selection.isCollapsed) {
            return true;
        }
        if (!deviceIsIOS4) {
            if (touch.identifier === this.lastTouchIdentifier) {
                event.preventDefault();
                return false;
            }
            this.lastTouchIdentifier = touch.identifier;
            this.updateScrollParent(targetElement);
        }
    }
    this.trackingClick = true;
    this.trackingClickStart = event.timeStamp;
    this.targetElement = targetElement;
    this.touchStartX = touch.pageX;
    this.touchStartY = touch.pageY;
    if (event.timeStamp - this.lastClickTime < this.tapDelay) {
        event.preventDefault();
    }
    return true;
};

FastClick.prototype.touchHasMoved = function(event) {
    "use strict";
    var touch = event.changedTouches[0], boundary = this.touchBoundary;
    if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
        return true;
    }
    return false;
};

FastClick.prototype.onTouchMove = function(event) {
    "use strict";
    if (!this.trackingClick) {
        return true;
    }
    if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
        this.trackingClick = false;
        this.targetElement = null;
    }
    return true;
};

FastClick.prototype.findControl = function(labelElement) {
    "use strict";
    if (labelElement.control !== undefined) {
        return labelElement.control;
    }
    if (labelElement.htmlFor) {
        return document.getElementById(labelElement.htmlFor);
    }
    return labelElement.querySelector("button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea");
};

FastClick.prototype.onTouchEnd = function(event) {
    "use strict";
    var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;
    if (!this.trackingClick) {
        return true;
    }
    if (event.timeStamp - this.lastClickTime < this.tapDelay) {
        this.cancelNextClick = true;
        return true;
    }
    this.cancelNextClick = false;
    this.lastClickTime = event.timeStamp;
    trackingClickStart = this.trackingClickStart;
    this.trackingClick = false;
    this.trackingClickStart = 0;
    if (deviceIsIOSWithBadTarget) {
        touch = event.changedTouches[0];
        targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
        targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
    }
    targetTagName = targetElement.tagName.toLowerCase();
    if (targetTagName === "label") {
        forElement = this.findControl(targetElement);
        if (forElement) {
            this.focus(targetElement);
            if (deviceIsAndroid) {
                return false;
            }
            targetElement = forElement;
        }
    } else if (this.needsFocus(targetElement)) {
        if (event.timeStamp - trackingClickStart > 100 || deviceIsIOS && window.top !== window && targetTagName === "input") {
            this.targetElement = null;
            return false;
        }
        this.focus(targetElement);
        this.sendClick(targetElement, event);
        if (!deviceIsIOS || targetTagName !== "select") {
            this.targetElement = null;
            event.preventDefault();
        }
        return false;
    }
    if (deviceIsIOS && !deviceIsIOS4) {
        scrollParent = targetElement.fastClickScrollParent;
        if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
            return true;
        }
    }
    if (!this.needsClick(targetElement)) {
        event.preventDefault();
        this.sendClick(targetElement, event);
    }
    return false;
};

FastClick.prototype.onTouchCancel = function() {
    "use strict";
    this.trackingClick = false;
    this.targetElement = null;
};

FastClick.prototype.onMouse = function(event) {
    "use strict";
    if (!this.targetElement) {
        return true;
    }
    if (event.forwardedTouchEvent) {
        return true;
    }
    if (!event.cancelable) {
        return true;
    }
    if (!this.needsClick(this.targetElement) || this.cancelNextClick) {
        if (event.stopImmediatePropagation) {
            event.stopImmediatePropagation();
        } else {
            event.propagationStopped = true;
        }
        event.stopPropagation();
        event.preventDefault();
        return false;
    }
    return true;
};

FastClick.prototype.onClick = function(event) {
    "use strict";
    var permitted;
    if (this.trackingClick) {
        this.targetElement = null;
        this.trackingClick = false;
        return true;
    }
    if (event.target.type === "submit" && event.detail === 0) {
        return true;
    }
    permitted = this.onMouse(event);
    if (!permitted) {
        this.targetElement = null;
    }
    return permitted;
};

FastClick.prototype.destroy = function() {
    "use strict";
    var layer = this.layer;
    if (deviceIsAndroid) {
        layer.removeEventListener("mouseover", this.onMouse, true);
        layer.removeEventListener("mousedown", this.onMouse, true);
        layer.removeEventListener("mouseup", this.onMouse, true);
    }
    layer.removeEventListener("click", this.onClick, true);
    layer.removeEventListener("touchstart", this.onTouchStart, false);
    layer.removeEventListener("touchmove", this.onTouchMove, false);
    layer.removeEventListener("touchend", this.onTouchEnd, false);
    layer.removeEventListener("touchcancel", this.onTouchCancel, false);
};

FastClick.notNeeded = function(layer) {
    "use strict";
    var metaViewport;
    var chromeVersion;
    if (typeof window.ontouchstart === "undefined") {
        return true;
    }
    chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [ , 0 ])[1];
    if (chromeVersion) {
        if (deviceIsAndroid) {
            metaViewport = document.querySelector("meta[name=viewport]");
            if (metaViewport) {
                if (metaViewport.content.indexOf("user-scalable=no") !== -1) {
                    return true;
                }
                if (chromeVersion > 31 && window.innerWidth <= window.screen.width) {
                    return true;
                }
            }
        } else {
            return true;
        }
    }
    if (layer.style.msTouchAction === "none") {
        return true;
    }
    return false;
};

FastClick.attach = function(layer, options) {
    "use strict";
    return new FastClick(layer, options);
};

if (typeof define !== "undefined" && define.amd) {
    define(function() {
        "use strict";
        return FastClick;
    });
} else if (typeof module !== "undefined" && module.exports) {
    module.exports = FastClick.attach;
    module.exports.FastClick = FastClick;
} else {
    window.FastClick = FastClick;
}

(function($, window, document, undefined) {
    "use strict";
    var header_helpers = function(class_array) {
        var i = class_array.length;
        var head = $("head");
        while (i--) {
            if (head.has("." + class_array[i]).length === 0) {
                head.append('<meta class="' + class_array[i] + '" />');
            }
        }
    };
    header_helpers([ "foundation-mq-small", "foundation-mq-medium", "foundation-mq-large", "foundation-mq-xlarge", "foundation-mq-xxlarge", "foundation-data-attribute-namespace" ]);
    $(function() {
        if (typeof FastClick !== "undefined") {
            if (typeof document.body !== "undefined") {
                FastClick.attach(document.body);
            }
        }
    });
    var S = function(selector, context) {
        if (typeof selector === "string") {
            if (context) {
                var cont;
                if (context.jquery) {
                    cont = context[0];
                    if (!cont) return context;
                } else {
                    cont = context;
                }
                return $(cont.querySelectorAll(selector));
            }
            return $(document.querySelectorAll(selector));
        }
        return $(selector, context);
    };
    var attr_name = function(init) {
        var arr = [];
        if (!init) arr.push("data");
        if (this.namespace.length > 0) arr.push(this.namespace);
        arr.push(this.name);
        return arr.join("-");
    };
    var add_namespace = function(str) {
        var parts = str.split("-"), i = parts.length, arr = [];
        while (i--) {
            if (i !== 0) {
                arr.push(parts[i]);
            } else {
                if (this.namespace.length > 0) {
                    arr.push(this.namespace, parts[i]);
                } else {
                    arr.push(parts[i]);
                }
            }
        }
        return arr.reverse().join("-");
    };
    var bindings = function(method, options) {
        var self = this, should_bind_events = !S(this).data(this.attr_name(true));
        if (typeof method === "string") {
            return this[method].call(this, options);
        }
        if (S(this.scope).is("[" + this.attr_name() + "]")) {
            S(this.scope).data(this.attr_name(true) + "-init", $.extend({}, this.settings, options || method, this.data_options(S(this.scope))));
            if (should_bind_events) {
                this.events(this.scope);
            }
        } else {
            S("[" + this.attr_name() + "]", this.scope).each(function() {
                var should_bind_events = !S(this).data(self.attr_name(true) + "-init");
                S(this).data(self.attr_name(true) + "-init", $.extend({}, self.settings, options || method, self.data_options(S(this))));
                if (should_bind_events) {
                    self.events(this);
                }
            });
        }
    };
    var single_image_loaded = function(image, callback) {
        function loaded() {
            callback(image[0]);
        }
        function bindLoad() {
            this.one("load", loaded);
            if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)) {
                var src = this.attr("src"), param = src.match(/\?/) ? "&" : "?";
                param += "random=" + new Date().getTime();
                this.attr("src", src + param);
            }
        }
        if (!image.attr("src")) {
            loaded();
            return;
        }
        if (image[0].complete || image[0].readyState === 4) {
            loaded();
        } else {
            bindLoad.call(image);
        }
    };
    window.matchMedia = window.matchMedia || function(doc) {
        "use strict";
        var bool, docElem = doc.documentElement, refNode = docElem.firstElementChild || docElem.firstChild, fakeBody = doc.createElement("body"), div = doc.createElement("div");
        div.id = "mq-test-1";
        div.style.cssText = "position:absolute;top:-100em";
        fakeBody.style.background = "none";
        fakeBody.appendChild(div);
        return function(q) {
            div.innerHTML = '&shy;<style media="' + q + '"> #mq-test-1 { width: 42px; }</style>';
            docElem.insertBefore(fakeBody, refNode);
            bool = div.offsetWidth === 42;
            docElem.removeChild(fakeBody);
            return {
                matches: bool,
                media: q
            };
        };
    }(document);
    (function($) {
        var animating, lastTime = 0, vendors = [ "webkit", "moz" ], requestAnimationFrame = window.requestAnimationFrame, cancelAnimationFrame = window.cancelAnimationFrame, jqueryFxAvailable = "undefined" !== typeof jQuery.fx;
        for (;lastTime < vendors.length && !requestAnimationFrame; lastTime++) {
            requestAnimationFrame = window[vendors[lastTime] + "RequestAnimationFrame"];
            cancelAnimationFrame = cancelAnimationFrame || window[vendors[lastTime] + "CancelAnimationFrame"] || window[vendors[lastTime] + "CancelRequestAnimationFrame"];
        }
        function raf() {
            if (animating) {
                requestAnimationFrame(raf);
                if (jqueryFxAvailable) {
                    jQuery.fx.tick();
                }
            }
        }
        if (requestAnimationFrame) {
            window.requestAnimationFrame = requestAnimationFrame;
            window.cancelAnimationFrame = cancelAnimationFrame;
            if (jqueryFxAvailable) {
                jQuery.fx.timer = function(timer) {
                    if (timer() && jQuery.timers.push(timer) && !animating) {
                        animating = true;
                        raf();
                    }
                };
                jQuery.fx.stop = function() {
                    animating = false;
                };
            }
        } else {
            window.requestAnimationFrame = function(callback) {
                var currTime = new Date().getTime(), timeToCall = Math.max(0, 16 - (currTime - lastTime)), id = window.setTimeout(function() {
                    callback(currTime + timeToCall);
                }, timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };
            window.cancelAnimationFrame = function(id) {
                clearTimeout(id);
            };
        }
    })(jQuery);
    function removeQuotes(string) {
        if (typeof string === "string" || string instanceof String) {
            string = string.replace(/^['\\/"]+|(;\s?})+|['\\/"]+$/g, "");
        }
        return string;
    }
    window.Foundation = {
        name: "Foundation",
        version: "5.2.2",
        media_queries: {
            small: S(".foundation-mq-small").css("font-family").replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ""),
            medium: S(".foundation-mq-medium").css("font-family").replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ""),
            large: S(".foundation-mq-large").css("font-family").replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ""),
            xlarge: S(".foundation-mq-xlarge").css("font-family").replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ""),
            xxlarge: S(".foundation-mq-xxlarge").css("font-family").replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, "")
        },
        stylesheet: $("<style></style>").appendTo("head")[0].sheet,
        global: {
            namespace: undefined
        },
        init: function(scope, libraries, method, options, response) {
            var args = [ scope, method, options, response ], responses = [];
            this.rtl = /rtl/i.test(S("html").attr("dir"));
            this.scope = scope || this.scope;
            this.set_namespace();
            if (libraries && typeof libraries === "string" && !/reflow/i.test(libraries)) {
                if (this.libs.hasOwnProperty(libraries)) {
                    responses.push(this.init_lib(libraries, args));
                }
            } else {
                for (var lib in this.libs) {
                    responses.push(this.init_lib(lib, libraries));
                }
            }
            return scope;
        },
        init_lib: function(lib, args) {
            if (this.libs.hasOwnProperty(lib)) {
                this.patch(this.libs[lib]);
                if (args && args.hasOwnProperty(lib)) {
                    if (typeof this.libs[lib].settings !== "undefined") {
                        $.extend(true, this.libs[lib].settings, args[lib]);
                    } else if (typeof this.libs[lib].defaults !== "undefined") {
                        $.extend(true, this.libs[lib].defaults, args[lib]);
                    }
                    return this.libs[lib].init.apply(this.libs[lib], [ this.scope, args[lib] ]);
                }
                args = args instanceof Array ? args : new Array(args);
                return this.libs[lib].init.apply(this.libs[lib], args);
            }
            return function() {};
        },
        patch: function(lib) {
            lib.scope = this.scope;
            lib.namespace = this.global.namespace;
            lib.rtl = this.rtl;
            lib["data_options"] = this.utils.data_options;
            lib["attr_name"] = attr_name;
            lib["add_namespace"] = add_namespace;
            lib["bindings"] = bindings;
            lib["S"] = this.utils.S;
        },
        inherit: function(scope, methods) {
            var methods_arr = methods.split(" "), i = methods_arr.length;
            while (i--) {
                if (this.utils.hasOwnProperty(methods_arr[i])) {
                    scope[methods_arr[i]] = this.utils[methods_arr[i]];
                }
            }
        },
        set_namespace: function() {
            var namespace = this.global.namespace === undefined ? $(".foundation-data-attribute-namespace").css("font-family") : this.global.namespace;
            this.global.namespace = namespace === undefined || /false/i.test(namespace) ? "" : namespace;
        },
        libs: {},
        utils: {
            S: S,
            throttle: function(func, delay) {
                var timer = null;
                return function() {
                    var context = this, args = arguments;
                    if (timer == null) {
                        timer = setTimeout(function() {
                            func.apply(context, args);
                            timer = null;
                        }, delay);
                    }
                };
            },
            debounce: function(func, delay, immediate) {
                var timeout, result;
                return function() {
                    var context = this, args = arguments;
                    var later = function() {
                        timeout = null;
                        if (!immediate) result = func.apply(context, args);
                    };
                    var callNow = immediate && !timeout;
                    clearTimeout(timeout);
                    timeout = setTimeout(later, delay);
                    if (callNow) result = func.apply(context, args);
                    return result;
                };
            },
            data_options: function(el) {
                var opts = {}, ii, p, opts_arr, data_options = function(el) {
                    var namespace = Foundation.global.namespace;
                    if (namespace.length > 0) {
                        return el.data(namespace + "-options");
                    }
                    return el.data("options");
                };
                var cached_options = data_options(el);
                if (typeof cached_options === "object") {
                    return cached_options;
                }
                opts_arr = (cached_options || ":").split(";");
                ii = opts_arr.length;
                function isNumber(o) {
                    return !isNaN(o - 0) && o !== null && o !== "" && o !== false && o !== true;
                }
                function trim(str) {
                    if (typeof str === "string") return $.trim(str);
                    return str;
                }
                while (ii--) {
                    p = opts_arr[ii].split(":");
                    if (/true/i.test(p[1])) p[1] = true;
                    if (/false/i.test(p[1])) p[1] = false;
                    if (isNumber(p[1])) {
                        if (p[1].indexOf(".") === -1) {
                            p[1] = parseInt(p[1], 10);
                        } else {
                            p[1] = parseFloat(p[1]);
                        }
                    }
                    if (p.length === 2 && p[0].length > 0) {
                        opts[trim(p[0])] = trim(p[1]);
                    }
                }
                return opts;
            },
            register_media: function(media, media_class) {
                if (Foundation.media_queries[media] === undefined) {
                    $("head").append('<meta class="' + media_class + '">');
                    Foundation.media_queries[media] = removeQuotes($("." + media_class).css("font-family"));
                }
            },
            add_custom_rule: function(rule, media) {
                if (media === undefined) {
                    Foundation.stylesheet.insertRule(rule, Foundation.stylesheet.cssRules.length);
                } else {
                    var query = Foundation.media_queries[media];
                    if (query !== undefined) {
                        Foundation.stylesheet.insertRule("@media " + Foundation.media_queries[media] + "{ " + rule + " }");
                    }
                }
            },
            image_loaded: function(images, callback) {
                var self = this, unloaded = images.length;
                if (unloaded === 0) {
                    callback(images);
                }
                images.each(function() {
                    single_image_loaded(self.S(this), function() {
                        unloaded -= 1;
                        if (unloaded === 0) {
                            callback(images);
                        }
                    });
                });
            },
            random_str: function() {
                if (!this.fidx) this.fidx = 0;
                this.prefix = this.prefix || [ this.name || "F", (+new Date()).toString(36) ].join("-");
                return this.prefix + (this.fidx++).toString(36);
            }
        }
    };
    $.fn.foundation = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        return this.each(function() {
            Foundation.init.apply(Foundation, [ this ].concat(args));
            return this;
        });
    };
})(jQuery, this, this.document);

(function($, window, document, undefined) {
    "use strict";
    Foundation.libs.abide = {
        name: "abide",
        version: "5.2.2",
        settings: {
            live_validate: true,
            focus_on_invalid: true,
            error_labels: true,
            timeout: 1e3,
            patterns: {
                alpha: /^[a-zA-Z]+$/,
                alpha_numeric: /^[a-zA-Z0-9]+$/,
                integer: /^[-+]?\d+$/,
                number: /^[-+]?\d*(?:\.\d+)?$/,
                card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,
                cvv: /^([0-9]){3,4}$/,
                email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,
                url: /^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,
                domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$/,
                datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,
                date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,
                time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,
                dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,
                month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.](19|20)\d\d$/,
                color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/
            },
            validators: {
                equalTo: function(el, required, parent) {
                    var from = document.getElementById(el.getAttribute(this.add_namespace("data-equalto"))).value, to = el.value, valid = from === to;
                    return valid;
                }
            }
        },
        timer: null,
        init: function(scope, method, options) {
            this.bindings(method, options);
        },
        events: function(scope) {
            var self = this, form = self.S(scope).attr("novalidate", "novalidate"), settings = form.data(this.attr_name(true) + "-init") || {};
            this.invalid_attr = this.add_namespace("data-invalid");
            form.off(".abide").on("submit.fndtn.abide validate.fndtn.abide", function(e) {
                var is_ajax = /ajax/i.test(self.S(this).attr(self.attr_name()));
                return self.validate(self.S(this).find("input, textarea, select").get(), e, is_ajax);
            }).on("reset", function() {
                return self.reset($(this));
            }).find("input, textarea, select").off(".abide").on("blur.fndtn.abide change.fndtn.abide", function(e) {
                self.validate([ this ], e);
            }).on("keydown.fndtn.abide", function(e) {
                if (settings.live_validate === true) {
                    clearTimeout(self.timer);
                    self.timer = setTimeout(function() {
                        self.validate([ this ], e);
                    }.bind(this), settings.timeout);
                }
            });
        },
        reset: function(form) {
            form.removeAttr(this.invalid_attr);
            $(this.invalid_attr, form).removeAttr(this.invalid_attr);
            $(".error", form).not("small").removeClass("error");
        },
        validate: function(els, e, is_ajax) {
            var validations = this.parse_patterns(els), validation_count = validations.length, form = this.S(els[0]).closest("[data-" + this.attr_name(true) + "]"), settings = form.data(this.attr_name(true) + "-init") || {}, submit_event = /submit/.test(e.type);
            form.trigger("validated");
            for (var i = 0; i < validation_count; i++) {
                if (!validations[i] && (submit_event || is_ajax)) {
                    if (settings.focus_on_invalid) els[i].focus();
                    form.trigger("invalid");
                    this.S(els[i]).closest("[data-" + this.attr_name(true) + "]").attr(this.invalid_attr, "");
                    return false;
                }
            }
            if (submit_event || is_ajax) {
                form.trigger("valid");
            }
            form.removeAttr(this.invalid_attr);
            if (is_ajax) return false;
            return true;
        },
        parse_patterns: function(els) {
            var i = els.length, el_patterns = [];
            while (i--) {
                el_patterns.push(this.pattern(els[i]));
            }
            return this.check_validation_and_apply_styles(el_patterns);
        },
        pattern: function(el) {
            var type = el.getAttribute("type"), required = typeof el.getAttribute("required") === "string";
            var pattern = el.getAttribute("pattern") || "";
            if (this.settings.patterns.hasOwnProperty(pattern) && pattern.length > 0) {
                return [ el, this.settings.patterns[pattern], required ];
            } else if (pattern.length > 0) {
                return [ el, new RegExp("^" + pattern + "$"), required ];
            }
            if (this.settings.patterns.hasOwnProperty(type)) {
                return [ el, this.settings.patterns[type], required ];
            }
            pattern = /.*/;
            return [ el, pattern, required ];
        },
        check_validation_and_apply_styles: function(el_patterns) {
            var i = el_patterns.length, validations = [], form = this.S(el_patterns[0][0]).closest("[data-" + this.attr_name(true) + "]"), settings = form.data(this.attr_name(true) + "-init") || {};
            while (i--) {
                var el = el_patterns[i][0], required = el_patterns[i][2], value = el.value, direct_parent = this.S(el).parent(), validator = el.getAttribute(this.add_namespace("data-abide-validator")), is_radio = el.type === "radio", is_checkbox = el.type === "checkbox", label = this.S('label[for="' + el.getAttribute("id") + '"]'), valid_length = required ? el.value.length > 0 : true;
                var parent, valid;
                if (el.getAttribute(this.add_namespace("data-equalto"))) {
                    validator = "equalTo";
                }
                if (!direct_parent.is("label")) {
                    parent = direct_parent;
                } else {
                    parent = direct_parent.parent();
                }
                if (is_radio && required) {
                    validations.push(this.valid_radio(el, required));
                } else if (is_checkbox && required) {
                    validations.push(this.valid_checkbox(el, required));
                } else if (validator) {
                    valid = this.settings.validators[validator].apply(this, [ el, required, parent ]);
                    validations.push(valid);
                    if (valid) {
                        this.S(el).removeAttr(this.invalid_attr);
                        parent.removeClass("error");
                    } else {
                        this.S(el).attr(this.invalid_attr, "");
                        parent.addClass("error");
                    }
                } else {
                    if (el_patterns[i][1].test(value) && valid_length || !required && el.value.length < 1 || $(el).attr("disabled")) {
                        this.S(el).removeAttr(this.invalid_attr);
                        parent.removeClass("error");
                        if (label.length > 0 && settings.error_labels) label.removeClass("error");
                        validations.push(true);
                        $(el).triggerHandler("valid");
                    } else {
                        this.S(el).attr(this.invalid_attr, "");
                        parent.addClass("error");
                        if (label.length > 0 && settings.error_labels) label.addClass("error");
                        validations.push(false);
                        $(el).triggerHandler("invalid");
                    }
                }
            }
            return validations;
        },
        valid_checkbox: function(el, required) {
            var el = this.S(el), valid = el.is(":checked") || !required;
            if (valid) {
                el.removeAttr(this.invalid_attr).parent().removeClass("error");
            } else {
                el.attr(this.invalid_attr, "").parent().addClass("error");
            }
            return valid;
        },
        valid_radio: function(el, required) {
            var name = el.getAttribute("name"), group = this.S(el).closest("[data-" + this.attr_name(true) + "]").find("[name=" + name + "]"), count = group.length, valid = false;
            for (var i = 0; i < count; i++) {
                if (group[i].checked) valid = true;
            }
            for (var i = 0; i < count; i++) {
                if (valid) {
                    this.S(group[i]).removeAttr(this.invalid_attr).parent().removeClass("error");
                } else {
                    this.S(group[i]).attr(this.invalid_attr, "").parent().addClass("error");
                }
            }
            return valid;
        },
        valid_equal: function(el, required, parent) {
            var from = document.getElementById(el.getAttribute(this.add_namespace("data-equalto"))).value, to = el.value, valid = from === to;
            if (valid) {
                this.S(el).removeAttr(this.invalid_attr);
                parent.removeClass("error");
            } else {
                this.S(el).attr(this.invalid_attr, "");
                parent.addClass("error");
            }
            return valid;
        },
        valid_oneof: function(el, required, parent, doNotValidateOthers) {
            var el = this.S(el), others = this.S("[" + this.add_namespace("data-oneof") + "]"), valid = others.filter(":checked").length > 0;
            if (valid) {
                el.removeAttr(this.invalid_attr).parent().removeClass("error");
            } else {
                el.attr(this.invalid_attr, "").parent().addClass("error");
            }
            if (!doNotValidateOthers) {
                var _this = this;
                others.each(function() {
                    _this.valid_oneof.call(_this, this, null, null, true);
                });
            }
            return valid;
        }
    };
})(jQuery, this, this.document);

(function($, window, document, undefined) {
    "use strict";
    Foundation.libs.accordion = {
        name: "accordion",
        version: "5.2.2",
        settings: {
            active_class: "active",
            multi_expand: false,
            toggleable: true
        },
        init: function(scope, method, options) {
            this.bindings(method, options);
        },
        events: function() {
            var self = this;
            var S = this.S;
            S(this.scope).off(".fndtn.accordion").on("click.fndtn.accordion", "[" + this.attr_name() + "] dd > a", function(e) {
                var accordion = S(this).closest("[" + self.attr_name() + "]"), target = S("#" + this.href.split("#")[1]), siblings = S("dd > .content", accordion), aunts = $("dd", accordion), settings = accordion.data(self.attr_name(true) + "-init"), active_content = S("dd > .content." + settings.active_class, accordion), active_parent = S("dd." + settings.active_class, accordion);
                e.preventDefault();
                if (!S(this).closest("dl").is(accordion)) {
                    return;
                }
                if (settings.toggleable && target.is(active_content)) {
                    active_parent.toggleClass(settings.active_class, false);
                    return target.toggleClass(settings.active_class, false);
                }
                if (!settings.multi_expand) {
                    siblings.removeClass(settings.active_class);
                    aunts.removeClass(settings.active_class);
                }
                target.addClass(settings.active_class).parent().addClass(settings.active_class);
            });
        },
        off: function() {},
        reflow: function() {}
    };
})(jQuery, this, this.document);

(function($, window, document, undefined) {
    "use strict";
    Foundation.libs.offcanvas = {
        name: "offcanvas",
        version: "5.2.2",
        settings: {},
        init: function(scope, method, options) {
            this.events();
        },
        events: function() {
            var self = this, S = self.S;
            S(this.scope).off(".offcanvas").on("click.fndtn.offcanvas", ".left-off-canvas-toggle", function(e) {
                self.click_toggle_class(e, "move-right");
            }).on("click.fndtn.offcanvas", ".left-off-canvas-menu a", function(e) {
                S(".off-canvas-wrap").removeClass("move-right");
            }).on("click.fndtn.offcanvas", ".right-off-canvas-toggle", function(e) {
                self.click_toggle_class(e, "move-left");
            }).on("click.fndtn.offcanvas", ".right-off-canvas-menu a", function(e) {
                S(".off-canvas-wrap").removeClass("move-left");
            }).on("click.fndtn.offcanvas", ".exit-off-canvas", function(e) {
                self.click_remove_class(e, "move-left");
                self.click_remove_class(e, "move-right");
            });
        },
        click_toggle_class: function(e, class_name) {
            e.preventDefault();
            this.S(e.target).closest(".off-canvas-wrap").toggleClass(class_name);
        },
        click_remove_class: function(e, class_name) {
            e.preventDefault();
            this.S(".off-canvas-wrap").removeClass(class_name);
        },
        reflow: function() {}
    };
})(jQuery, this, this.document);

(function($, window, document, undefined) {
    "use strict";
    Foundation.libs.alert = {
        name: "alert",
        version: "5.2.2",
        settings: {
            callback: function() {}
        },
        init: function(scope, method, options) {
            this.bindings(method, options);
        },
        events: function() {
            var self = this, S = this.S;
            $(this.scope).off(".alert").on("click.fndtn.alert", "[" + this.attr_name() + "] a.close", function(e) {
                var alertBox = S(this).closest("[" + self.attr_name() + "]"), settings = alertBox.data(self.attr_name(true) + "-init") || self.settings;
                e.preventDefault();
                if ("transitionend" in window || "webkitTransitionEnd" in window || "oTransitionEnd" in window) {
                    alertBox.addClass("alert-close");
                    alertBox.on("transitionend webkitTransitionEnd oTransitionEnd", function(e) {
                        S(this).trigger("close").remove();
                        settings.callback();
                    });
                } else {
                    alertBox.fadeOut(300, function() {
                        S(this).trigger("close").remove();
                        settings.callback();
                    });
                }
            });
        },
        reflow: function() {}
    };
})(jQuery, this, this.document);